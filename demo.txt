import React, { useState, useEffect } from "react";
import GoogleButton from "react-google-button";
import toast from "react-hot-toast";
import { signIn } from "next-auth/react";
import { useRouter } from "next/navigation";

const CustomGoogleButton = (props) => {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [googleSignInSuccess, setGoogleSignInSuccess] = useState(false);

  useEffect(() => {
    // Event listener for messages sent from the child window
    const handleGoogleSignInResponse = (event) => {
      // Ensure the message is from the expected origin
      if (
        event.origin === window.location.origin &&
        event.data.type === "googleSignInResponse"
      ) {
        if (event.data.success) {
          // User successfully signed in, set the success state
          setGoogleSignInSuccess(true);
        } else {
          // Handle sign-in errors
          console.error("Error signing in with Google:", event.data.error);
          toast.error("Error signing in with Google. Please try again later.");
        }
      }
    };

    // Add event listener
    window.addEventListener("message", handleGoogleSignInResponse);

    // Clean up the event listener on component unmount
    return () => {
      window.removeEventListener("message", handleGoogleSignInResponse);
    };
  }, []); // Empty dependency array ensures the effect runs once after the initial render

  // Handle Google sign-in click
  const handleGoogleSignIn = async () => {
    setIsLoading(true);

    try {
      // Initiate the Google sign-in flow using next-auth signIn method
      await signIn("google", {
        callbackUrl: `${window.location.origin}/api/auth/callback/google`,
        redirect: false,
        scopes: ["openid", "https://www.googleapis.com/auth/calendar.read"],
      });

      // Assuming the user is redirected back to this page after successful authentication.
      toast.success("Google sign-in initiated successfully!");
    } catch (error) {
      console.error("Error initiating Google sign-in:", error);
      toast.error("Error initiating Google sign-in. Please try again later.");
    } finally {
      setIsLoading(false);
    }
  };

  // Redirect user to "/" after successful Google sign-in
  useEffect(() => {
    if (googleSignInSuccess) {
      router.replace("/");
    }
  }, [googleSignInSuccess, router]);

  return (
    <GoogleButton
      onClick={handleGoogleSignIn}
      {...props}
      disabled={isLoading}
      text={isLoading ? "Loading..." : "Sign in with Google"}
    />
  );
};

export default CustomGoogleButton;
"use client";

import React, { useState } from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import toast from "react-hot-toast";
import { useSession } from "next-auth/react";
import { addTask } from "@/services/taskService";

const TaskDetails = ({ onNext }) => {
  const { data: session } = useSession();
  const userEmail = session?.user?.email;
  const status = "OPEN";

  const [task, setTask] = useState({
    title: "",
    selectedDate: null,
    location: "",
    budget: "",
  });

  const handleDateChange = (date) => {
    setTask((prevTask) => ({ ...prevTask, selectedDate: date }));
  };

  const handleGetLocation = () => {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const latitude = position.coords.latitude;
          const longitude = position.coords.longitude;
          const location = `Latitude: ${latitude}, Longitude: ${longitude}`;

          setTask((prevTask) => ({ ...prevTask, location }));
        },
        (error) => {
          console.error("Error getting location:", error);
          toast.error("Error getting your location. Please try again.");
        }
      );
    } else {
      toast.error("Geolocation is not supported by your browser.");
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const taskWithUserEmail = { ...task, userEmail, status };
      const result = await addTask(taskWithUserEmail);

      toast.success("Task Added successfully");
      setTask({
        title: "",
        selectedDate: null,
        location: "",
        budget: "",
      });
      // Assuming onNext is a function to handle the next step
    } catch (error) {
      console.error("Error creating task:", error);
      toast.error("Failed to add task");
    }
  };

  return (
    <div className="max-w-md p-6 mx-auto bg-white rounded shadow-md">
      <h1 className="mb-6 text-2xl font-semibold text-center text-gray-800">
        Task Details
      </h1>
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-600">
          What do you need done?
        </label>
        <input
          type="text"
          className="w-full p-2 mt-1 border rounded focus:outline-none focus:border-blue-500"
          placeholder="E.g. Help move my sofa"
          value={task.title}
          onChange={(e) =>
            setTask((prevTask) => ({ ...prevTask, title: e.target.value }))
          }
        />
      </div>
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-600">
          When do you need this done?
        </label>
        <DatePicker
          className="w-full p-2 border rounded focus:outline-none focus:border-blue-500"
          selected={task.selectedDate}
          onChange={handleDateChange}
          placeholderText="Select a date"
        />
      </div>
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-600">
          Where do you need this done?
        </label>
        <input
          type="text"
          className="w-full p-2 mt-1 border rounded focus:outline-none focus:border-blue-500"
          placeholder="Enter your location"
          value={task.location}
          onChange={(e) =>
            setTask((prevTask) => ({ ...prevTask, location: e.target.value }))
          }
        />
      </div>
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-600">
          Whats your budget for this task?
        </label>
        <input
          type="text"
          className="w-full p-2 mt-1 border rounded focus:outline-none focus:border-blue-500"
          placeholder="Enter your budget"
          value={task.budget}
          onChange={(e) =>
            setTask((prevTask) => ({ ...prevTask, budget: e.target.value }))
          }
        />
      </div>
      <div className="mb-4">
        <button
          className="w-full py-2 text-white bg-blue-500 rounded hover:bg-blue-600 focus:outline-none"
          onClick={handleGetLocation}
        >
          Get My Location
        </button>
      </div>
      <button
        className="w-full py-2 text-white bg-blue-500 rounded hover:bg-blue-600 focus:outline-none"
        onClick={handleSubmit}
      >
        Next
      </button>
    </div>
  );
};

export default TaskDetails;
